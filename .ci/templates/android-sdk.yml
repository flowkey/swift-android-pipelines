# parameters:
# arch: [ 'armv7' | 'aarch64' | 'x86_64' ]
# host: [ 'arm' | 'arm64' | 'x64' ]
# triple: [ 'armv7-unknown-linux-gnu' | 'aarch64-unknown-linux-android' | 'x86_64-unknown-linux-android' ]

jobs:
  - job: android_${{ parameters.host }}
    variables:
      toolchain.directory: $(System.ArtifactsDirectory)/toolchain/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      curl.directory: $(System.ArtifactsDirectory)/curl-android-${{ parameters.host }}/libcurl-development
      icu.version: 64
      icu.directory: $(System.ArtifactsDirectory)/icu-android-${{ parameters.host }}/ICU-$(icu.version)
      xml2.directory: $(System.ArtifactsDirectory)/xml2-android-${{ parameters.host }}/libxml2-development
      install.directory: $(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk/usr
      xctest.install.directory: $(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr
    steps:
      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          git clone --depth 1 --single-branch https://github.com/apple/swift-llvm llvm
          git clone --config core.autocrlf=false --config core.symlinks=true --depth 1 --single-branch https://github.com/apple/swift swift

          git clone --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch

          git clone --depth 1 --single-branch https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
          # PR2364
          git -C swift-corelibs-foundation fetch origin pull/2364/head
          git -C swift-corelibs-foundation cherry-pick FETCH_HEAD

          git clone --depth 1 --single-branch https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest
        displayName: 'Fetch Sources'
      - task: DownloadBuildArtifacts@0
        displayName: 'Install toolchain'
        inputs:
          buildType: specific
          project: 'swift-android'
          pipeline: "Linux Toolchain x86_64"
          allowPartiallySucceededBuilds: true
          artifactName: 'toolchain'
          downloadPath: '$(System.ArtifactsDirectory)'
          parallelizationLimit: 8
      - task: DownloadBuildArtifacts@0
        displayName: 'Install ICU'
        inputs:
          buildType: specific
          project: 'swift-android'
          allowPartiallySucceededBuilds: true
          pipeline: "ICU"
          artifactName: 'icu-android-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'
          parallelizationLimit: 8
      - task: DownloadBuildArtifacts@0
        displayName: 'Install XML2'
        inputs:
          buildType: specific
          project: 'swift-android'
          pipeline: "XML2"
          allowPartiallySucceededBuilds: true
          artifactName: 'xml2-android-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'
          parallelizationLimit: 8
      - task: DownloadBuildArtifacts@0
        displayName: 'Install CURL'
        inputs:
          buildType: specific
          project: 'swift-android'
          pipeline: "CURL"
          allowPartiallySucceededBuilds: true
          artifactName: 'curl-android-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'
          parallelizationLimit: 8
      # - task: BatchScript@1
      #   inputs:
      #     filename: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat
      #     arguments: -no_logo -arch=x64 -host_arch=x64
      #     modifyEnvironment: true
      #   condition: eq( variables['Agent.OS'], 'Windows_NT' )
      #   displayName: 'vsvarsall.bat'
      # - script: |
      #     echo "##vso[task.setvariable variable=PATH]$(toolchain.directory)/usr/bin;%PATH%"
      #   condition: eq( variables['Agent.OS'], 'Windows_NT' )
      #   displayName: 'Update PATH'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/llvm
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_HOST_TRIPLE=${{ parameters.triple }}
        displayName: 'Configure LLVM'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/swift-stdlib
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake -C $(Build.SourcesDirectory)/cmake/caches/swift-stdlib-android-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)/swift -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/llvm -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin -DCMAKE_INSTALL_PREFIX=$(install.directory) -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_UC_INCLUDE=$(icu.directory)/usr/include/unicode -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_UC=$(icu.directory)/usr/lib/libicuuc$(icu.version).so -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_I18N_INCLUDE=$(icu.directory)/usr/include -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_I18N=$(icu.directory)/usr/lib/libicuin$(icu.version).so
        displayName: 'Configure Swift standard library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib
        displayName: 'Build Swift standard library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib --target install
        displayName: 'Install Swift standard library'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/libdispatch
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)/swift-corelibs-libdispatch -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_SWIFT_COMPILER=swiftc -DCMAKE_INSTALL_PREFIX=$(install.directory) -DENABLE_TESTING=NO -DENABLE_SWIFT=YES
        displayName: 'Configure libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/libdispatch
        displayName: 'Build libdispatch'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/foundation
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake $(Build.SourcesDirectory)/swift-corelibs-foundation -DCMAKE_BUILD_TYPE=Release -DCMAKE_SWIFT_COMPILER=swiftc -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.a -DCURL_INCLUDE_DIR=$(curl.directory)/usr/include -DICU_INCLUDE_DIR=$(icu.directory)/usr/include -DICU_UC_LIBRARY=$(icu.directory)/usr/lib/libicuuc$(icu.version).so -DICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuuc$(icu.version).so -DICU_I18N_LIBRARY=$(icu.directory)/usr/lib/libicuin$(icu.version).so -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuin$(icu.version).so -DLIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2.a -DLIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2 -DFOUNDATION_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch -DFOUNDATION_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)/libdispatch
        displayName: 'Configure Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/foundation
        displayName: 'Build Foundation'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/xctest
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake $(Build.SourcesDirectory)/swift-corelibs-xctest -DCMAKE_BUILD_TYPE=Release -DCMAKE_SWIFT_COMPILER=swiftc -DCMAKE_INSTALL_PREFIX=$(xctest.install.directory) -DENABLE_TESTING=NO -DXCTEST_PATH_TO_FOUNDATION_BUILD=$(Build.StagingDirectory)/foundation -DXCTEST_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch -DXCTEST_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)/libdispatch
        displayName: 'Configure XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/xctest
        displayName: 'Build XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/libdispatch --target install
        displayName: 'Install libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/foundation --target install
        displayName: 'Install Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/xctest --target install
        displayName: 'Install XCTest'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)/Library
          artifactName: sdk-android-${{ parameters.host }}

