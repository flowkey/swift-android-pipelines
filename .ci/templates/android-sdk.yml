# parameters:
# arch: [ 'armv7' | 'aarch64' | 'x86_64' ]
# host: [ 'arm' | 'arm64' | 'x64' ]
# triple: [ 'armv7-unknown-linux-gnu' | 'aarch64-unknown-linux-android' | 'x86_64-unknown-linux-android' ]

jobs:
  - job: android_${{ parameters.host }}
    variables:
      toolchain.directory: $(System.ArtifactsDirectory)/toolchain/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      curl.directory: $(System.ArtifactsDirectory)/curl-android-${{ parameters.host }}/libcurl-development
      icu.version: 64
      icu.directory: $(System.ArtifactsDirectory)/icu-android-${{ parameters.host }}/icu-$(icu.version)
      xml2.directory: $(System.ArtifactsDirectory)/xml2-android-${{ parameters.host }}/libxml2-development
      install.directory: $(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk/usr
      xctest.install.directory: $(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr
    steps:
      - script: |
          set -e

          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          function cloneOrClean() {
            local readonly url=$1
            local readonly directory=$2
            shift 2

            if [ ! -d "${directory}" ]; then
              git clone --depth 1 --single-branch $@ ${url} ${directory}
            else
              local readonly CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
              git -C ${directory} clean -xdf
              git -C ${directory} fetch origin ${CURRENT_BRANCH} --prune --depth=1
              git -C ${directory} reset --hard origin/${CURRENT_BRANCH}
            fi
          }

          cloneOrClean https://github.com/apple/swift-llvm llvm
          cloneOrClean https://github.com/apple/swift swift --config core.autocrlf=false --config core.symlinks=true
          cloneOrClean https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
          cloneOrClean https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
          cloneOrClean https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest

          # PR508 - Remove Android Platform level for swiftc invocations
          git -C swift-corelibs-libdispatch fetch origin pull/508/head
          git -C swift-corelibs-libdispatch cherry-pick FETCH_HEAD

        displayName: 'Fetch Sources'
      - task: DownloadBuildArtifacts@0
        displayName: 'Install toolchain'
        inputs:
          buildType: specific
          project: 'swift-android'
          pipeline: "Linux Toolchain x86_64"
          allowPartiallySucceededBuilds: true
          artifactName: 'toolchain'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: DownloadBuildArtifacts@0
        displayName: 'Install ICU'
        inputs:
          buildType: specific
          project: 'swift-android'
          allowPartiallySucceededBuilds: true
          pipeline: "ICU"
          artifactName: 'icu-android-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: DownloadBuildArtifacts@0
        displayName: 'Install XML2'
        inputs:
          buildType: specific
          project: 'swift-android'
          pipeline: "XML2"
          allowPartiallySucceededBuilds: true
          artifactName: 'xml2-android-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: DownloadBuildArtifacts@0
        displayName: 'Install CURL'
        inputs:
          buildType: specific
          project: 'swift-android'
          pipeline: "CURL"
          allowPartiallySucceededBuilds: true
          artifactName: 'curl-android-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'

      # <Windows build machines only>
      - ${{ if eq( variables['Agent.OS'], 'Windows_NT' ) }}:
        - task: BatchScript@1
          inputs:
            filename: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat
            arguments: -no_logo -arch=x64 -host_arch=x64
            modifyEnvironment: true
          displayName: 'vsvarsall.bat'
        - script: echo "##vso[task.setvariable variable=PATH]$(toolchain.directory)/usr/bin;%PATH%"
          displayName: 'Update PATH'
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '2.7.x'
      # </Windows build machines only>

      # <Linux build machines only>
      # - ${{ if eq(variables['Agent.OS'], 'Linux') }}:
      - script: echo "##vso[task.setvariable variable=PATH]$(toolchain.directory)/usr/bin:$PATH"
        displayName: 'Update PATH'
      - script: chmod +x $(toolchain.directory)/usr/bin/*
        displayName: Make toolchain executable
      # </Linux build machines only>

      - task: CMake@1
        displayName: 'Configure LLVM'
        inputs:
          workingDirectory: $(Build.StagingDirectory)/llvm
          cmakeArgs: >-
            -G Ninja
            -C $(Build.SourcesDirectory)/cmake/caches/android.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchains/android.toolchain.ndk20.cmake
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -DLLVM_HOST_TRIPLE=${{ parameters.triple }}
            -DCMAKE_BUILD_TYPE=Release
            $(Build.SourcesDirectory)/llvm
      - task: CMake@1
        displayName: 'Configure Swift standard library'
        inputs:
          workingDirectory: $(Build.StagingDirectory)/swift-stdlib
          cmakeArgs: >-
            -G Ninja
            -C $(Build.SourcesDirectory)/cmake/caches/android.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/swift-stdlib-android.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/swift-stdlib-android-${{ parameters.arch }}.cmake
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
            -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchains/android.toolchain.ndk20.cmake
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DLLVM_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/llvm
            -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin
            -DCMAKE_INSTALL_PREFIX=$(install.directory)
            -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_UC_INCLUDE=$(icu.directory)/usr/include/unicode
            -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_UC=$(icu.directory)/usr/lib/libicuuc$(icu.version).so
            -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_I18N_INCLUDE=$(icu.directory)/usr/include
            -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_I18N=$(icu.directory)/usr/lib/libicuin$(icu.version).so
            $(Build.SourcesDirectory)/swift
      - task: CMake@1
        displayName: 'Build Swift standard library'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib
      - task: CMake@1
        displayName: 'Install Swift standard library'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib --target install
      - task: CMake@1
        displayName: 'Configure libdispatch'
        inputs:
          workingDirectory: $(Build.StagingDirectory)/libdispatch
          cmakeArgs: >-
            -G Ninja
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchains/android.toolchain.ndk20.cmake
            -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk
            -C $(Build.SourcesDirectory)/cmake/caches/android.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
            -DCMAKE_SWIFT_COMPILER=swiftc
            -DCMAKE_INSTALL_PREFIX=$(install.directory)
            -DENABLE_TESTING=NO
            -DENABLE_SWIFT=YES
            $(Build.SourcesDirectory)/swift-corelibs-libdispatch
      - task: CMake@1
        displayName: 'Build libdispatch'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/libdispatch -- --verbose
      - task: CMake@1
        displayName: 'Configure Foundation'
        inputs:
          workingDirectory: $(Build.StagingDirectory)/foundation
          cmakeArgs: >-
            -G Ninja
            -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchains/android.toolchain.ndk20.cmake
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
            -DCMAKE_SWIFT_COMPILER=swiftc
            -DCMAKE_INSTALL_PREFIX=$(install.directory)
            -DCURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.a
            -DCURL_INCLUDE_DIR=$(curl.directory)/usr/include
            -DICU_INCLUDE_DIR=$(icu.directory)/usr/include
            -DICU_UC_LIBRARY=$(icu.directory)/usr/lib/libicuuc$(icu.version).so
            -DICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuuc$(icu.version).so
            -DICU_I18N_LIBRARY=$(icu.directory)/usr/lib/libicuin$(icu.version).so
            -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuin$(icu.version).so
            -DLIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2.a
            -DLIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2
            -DFOUNDATION_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
            -DFOUNDATION_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)/libdispatch
            $(Build.SourcesDirectory)/swift-corelibs-foundation
      - task: CMake@1
        displayName: 'Build Foundation'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/foundation
      - task: CMake@1
        displayName: 'Configure XCTest'
        inputs:
          workingDirectory: $(Build.StagingDirectory)/xctest
          cmakeArgs: >-
            -G Ninja
            -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}.cmake
            -C $(Build.SourcesDirectory)/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchains/android.toolchain.ndk20.cmake
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
            -DCMAKE_SWIFT_COMPILER=swiftc
            -DCMAKE_INSTALL_PREFIX=$(xctest.install.directory)
            -DXCTEST_PATH_TO_FOUNDATION_BUILD=$(Build.StagingDirectory)/foundation
            -DXCTEST_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
            -DXCTEST_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)/libdispatch
            -DENABLE_TESTING=NO
            $(Build.SourcesDirectory)/swift-corelibs-xctest
      - task: CMake@1
        displayName: 'Build XCTest'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/xctest
      - task: CMake@1
        displayName: 'Install libdispatch'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/libdispatch --target install
      - task: CMake@1
        displayName: 'Install Foundation'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/foundation --target install
      - task: CMake@1
        displayName: 'Install XCTest'
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/xctest --target install
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)/Library
          artifactName: sdk-android-${{ parameters.host }}
