steps:
  - script: |
      git config --global user.name 'builder'
      git config --global user.email 'builder@compnerd.org'

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llvm llvm
      git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift swift

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest
    displayName: 'Fetch Sources'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      allowPartiallySucceededBuilds: true
      pipeline: 14
      artifactName: 'toolchain'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install toolchain'
  - script: |
      chmod +x $(toolchain.directory)/usr/bin/ar
      chmod +x $(toolchain.directory)/usr/bin/clang
      chmod +x $(toolchain.directory)/usr/bin/clang++
      chmod +x $(toolchain.directory)/usr/bin/swift-autolink-extract
      chmod +x $(toolchain.directory)/usr/bin/swiftc
      chmod +x $(toolchain.directory)/usr/bin/ld.lld
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: 'Correct File Modes'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      allowPartiallySucceededBuilds: true
      pipeline: 9
      artifactName: 'icu-linux-$(host)'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install ICU'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/llvm
      cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/linux-$(arch).cmake $(Build.SourcesDirectory)/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_HOST_TRIPLE=$(triple)
    displayName: 'Configure LLVM'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/swift-stdlib
      cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/linux-$(arch).cmake -C $(Build.SourcesDirectory)/cmake/caches/swift-stdlib-linux-$(arch).cmake $(Build.SourcesDirectory)/swift -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/llvm -DCMAKE_C_COMPILER=$(toolchain.directory)/usr/bin/clang -DCMAKE_CXX_COMPILER=$(toolchain.directory)/usr/bin/clang++ -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin -DCMAKE_INSTALL_PREFIX=$(install.directory) -DSWIFT_LINUX_$(arch)_ICU_UC_INCLUDE=$(icu.directory)/usr/include/unicode -DSWIFT_LINUX_$(arch)_ICU_UC=$(icu.directory)/usr/lib/libicuuc$(icu.version).so -DSWIFT_LINUX_$(arch)_ICU_I18N_INCLUDE=$(icu.directory)/usr/include -DSWIFT_LINUX_$(arch)_ICU_I18N=$(icu.directory)/usr/lib/libicuin$(icu.version).so
    displayName: 'Configure Swift standard library'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib
    displayName: 'Build Swift standard library'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib --target install
    displayName: 'Install Swift standard library'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/libdispatch
      cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/cmake/caches/linux-$(arch).cmake -DCMAKE_Swift_SDK=$(install.directory)/.. -C $(Build.SourcesDirectory)/cmake/caches/linux-$(arch)-swift-flags.cmake $(Build.SourcesDirectory)/swift-corelibs-libdispatch -DCMAKE_BUILD_TYPE=Release -DCMAKE_SWIFT_COMPILER=$(toolchain.directory)/usr/bin/swiftc -DCMAKE_INSTALL_PREFIX=$(install.directory) -DENABLE_TESTING=NO -DENABLE_SWIFT=YES -DUSE_LLD_LINKER=YES -DUSE_GOLD_LINKER=NO
    displayName: 'Configure libdispatch'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/libdispatch
    displayName: 'Build libdispatch'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.StagingDirectory)/Library
      artifactName: sdk-linux-$(host)

