# parameters:
# arch: [ 'aarch64' | 'x86_64' ]
# build: [ 'arm64' | 'x64' ]
# triple: [ 'aarch64-unknown-windows-msvc' | 'x86_64-unknown-windows-msvc' ]

jobs:
  - job: windows_${{ parameters.build }}
    variables:
      toolchain.directory: $(System.ArtifactsDirectory)\toolchain\Developer\Toolchains\unknown-Asserts-development.xctoolchain
      curl.directory: $(System.ArtifactsDirectory)\curl-windows-${{ parameters.build }}\libcurl-development
      icu.version: 64
      icu.directory: $(System.ArtifactsDirectory)\icu-windows-${{ parameters.build }}\ICU-$(icu.version)
      sqlite.version: 3.28.0
      sqlite.directory: $(System.ArtifactsDirectory)\sqlite-windows-${{ parameters.build }}\sqlite-$(sqlite.version)
      xml2.directory: $(System.ArtifactsDirectory)\xml2-windows-${{ parameters.build }}\libxml2-development
      install.directory: $(Build.StagingDirectory)\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk\usr
      xctest.install.directory: $(Build.StagingDirectory)\Library\Developer\Platforms\Windows.platform\Developer\Library\XCTest-development\usr
      llbuild.install.directory: $(Build.StagingDirectory)\Library\Developer\SharedSupport\llbuild-development\usr
    pool:
      vmImage: 'windows-2019'
    steps:
      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llvm llvm

          git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift swift

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llbuild llbuild
        displayName: 'Fetch Sources'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          allowPartiallySucceededBuilds: true
          pipeline: 1
          artifactName: 'toolchain'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install toolchain'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          allowPartiallySucceededBuilds: true
          pipeline: 9
          artifactName: 'icu-windows-${{ parameters.build }}'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install ICU'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 10
          allowPartiallySucceededBuilds: true
          artifactName: 'xml2-windows-${{ parameters.build }}'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install XML2'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 11
          allowPartiallySucceededBuilds: true
          artifactName: 'curl-windows-${{ parameters.build }}'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install CURL'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 12
          allowPartiallySucceededBuilds: true
          artifactName: 'sqlite-windows-${{ parameters.build }}'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install SQLite3'
      - task: BatchScript@1
        inputs:
          filename: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.build }} -host_arch=x64
          modifyEnvironment: true
        displayName: 'vcvarsall.bat'
      - script: |
          echo "##vso[task.setvariable variable=PATH]$(toolchain.directory)\usr\bin;%PATH%"
        displayName: 'Update PATH'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
      - script: |
          curl -L "https://raw.githubusercontent.com/apple/swift/master/stdlib/public/Platform/ucrt.modulemap" -o "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          curl -L "https://raw.githubusercontent.com/apple/swift/master/stdlib/public/Platform/visualc.modulemap" -o "%VCToolsInstallDir%\include\module.modulemap"
          curl -L "https://raw.githubusercontent.com/apple/swift/master/stdlib/public/Platform/visualc.apinotes" -o "%VCToolsInstallDir%\include\visualc.apinotes"
          curl -L "https://raw.githubusercontent.com/apple/swift/master/stdlib/public/Platform/winsdk.modulemap" -o "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
        displayName: 'Configure SDK'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\llvm
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\windows-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)\llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DLLVM_HOST_TRIPLE=${{ parameters.triple }}
        displayName: 'Configure LLVM'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\stdlib
          # NOTE(compnerd) explicitly pass the CMAKE_C_FLAGS and CMAKE_CXX_FLAGS for the ARM64 cross-compile
          cmakeArgs: -G Ninja -DCMAKE_C_FLAGS="--target=${{ parameters.triple }}" -DCMAKE_CXX_FLAGS="--target=${{ parameters.triple }}" -C $(Build.SourcesDirectory)\cmake\caches\windows-${{ parameters.arch }}.cmake -C $(Build.SourcesDirectory)\cmake\caches\swift-stdlib-windows-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)\swift -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-cl.exe -DCMAKE_CXX_COMPILER=clang-cl.exe -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCMAKE_SWIFT_COMPILER=swiftc.exe -DLLVM_DIR=$(Build.StagingDirectory)\llvm\lib\cmake\llvm -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)\usr\bin -DSWIFT_WINDOWS_${{ parameters.arch }}_ICU_UC_INCLUDE=$(icu.directory)\usr\include\unicode -DSWIFT_WINDOWS_${{ parameters.arch }}_ICU_UC=$(icu.directory)\usr\lib\icuuc$(icu.version).lib -DSWIFT_WINDOWS_${{ parameters.arch }}_ICU_I18N_INCLUDE=$(icu.directory)\usr\include -DSWIFT_WINDOWS_${{ parameters.arch }}_ICU_I18N=$(icu.directory)\usr\lib\icuin$(icu.version).lib
        displayName: 'Configure Swift Standard Library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\stdlib
        displayName: 'Build Swift Standard Library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\stdlib --target install
        displayName: 'Install Swift Standard Library'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\libdispatch
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\windows-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)\swift-corelibs-libdispatch -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-cl.exe -DCMAKE_CXX_COMPILER=clang-cl.exe -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCMAKE_SWIFT_COMPILER=swiftc.exe -DENABLE_TESTING=NO -DENABLE_SWIFT=YES
        displayName: 'Configure libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\libdispatch
        displayName: 'Build libdispatch'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\foundation
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\windows-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)\swift-corelibs-foundation -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-cl.exe -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCMAKE_C_COMPILER_TARGET=${{ parameters.triple }} -DCMAKE_SWIFT_COMPILER=swiftc.exe -DCURL_LIBRARY=$(curl.directory)\usr\lib\libcurl.lib -DCURL_INCLUDE_DIR=$(curl.directory)\usr\include -DICU_UC_LIBRARY=$(icu.directory)\usr\lib\icuuc$(icu.version).lib -DICU_UC_LIBRARY_RELEASE=$(icu.directory)\usr\lib\icuuc$(icu.version).lib -DICU_I18N_LIBRARY=$(icu.directory)\usr\lib\icuin$(icu.version).lib -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)\usr\lib\icuin$(icu.version).lib -DICU_INCLUDE_DIR=$(icu.directory)\usr\include -DLIBXML2_LIBRARY=$(xml2.directory)\usr\lib\libxml2s.lib -DLIBXML2_INCLUDE_DIR=$(xml2.directory)\usr\include\libxml2 -DFOUNDATION_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)\swift-corelibs-libdispatch -DFOUNDATION_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)\libdispatch
        displayName: 'Configure Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\foundation
        displayName: 'Build Foundation'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\xctest
          # NOTE(compnerd) we need to pass `-DCMAKE_C_COMPILER=cl` for now as until CMake 3.15, the project sets the language to C
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\windows-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)\swift-corelibs-xctest -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_INSTALL_PREFIX=$(xctest.install.directory) -DCMAKE_SWIFT_COMPILER=swiftc.exe -DENABLE_TESTING=NO -DXCTEST_PATH_TO_FOUNDATION_BUILD=$(Build.StagingDirectory)\foundation -DXCTEST_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)\swift-corelibs-libdispatch -DXCTEST_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)\libdispatch
        displayName: 'Configure XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\xctest
        displayName: 'Build XCTest'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\llbuild
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\windows-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)\llbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_INSTALL_PREFIX=$(llbuild.install.directory) -DLLBUILD_SUPPORT_BINDINGS=Swift -DFOUNDATION_BUILD_DIR=$(Build.StagingDirectory)\foundation -DLIBDISPATCH_BUILD_DIR=$(Build.StagingDirectory)\libdispatch -DLIBDISPATCH_SOURCE_DIR=$(Build.SourcesDirectory)\swift-corelibs-libdispatch -DSQLite3_LIBRARY=$(sqlite.directory)\usr\lib\SQLite3.lib -DSQLite3_INCLUDE_DIR=$(sqlite.directory)\usr\include
        displayName: 'Configure llbuild'
        continueOnError: true
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\llbuild
        displayName: 'Build llbuild'
        continueOnError: true
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\libdispatch --target install
        displayName: 'Install libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\foundation --target install
        displayName: 'Install Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\xctest --target install
        displayName: 'Install XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\llbuild --target install
        displayName: 'Install llbuild'
        continueOnError: true
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)\Library
          artifactName: sdk-windows-${{ parameters.build }}
